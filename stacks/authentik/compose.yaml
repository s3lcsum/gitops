x-default: &default
  restart: unless-stopped
  networks:
    - authentik
    - metrics
  labels:
    com.centurylinklabs.watchtower.enable: false

x-healthchecks: &healthchecks
  start_period: 20s
  interval: 30s
  retries: 5
  timeout: 3s

x-authentik: &authentik
  <<: *default
  image: ghcr.io/goauthentik/server:2025.4
  volumes:
    - /var/run/docker.sock:/var/run/docker.sock
    - /portainer/authentik/media/media
    - /portainer/authentik/certs:/certs
    - /portainer/authentik/templates:/templates
  environment:
    AUTHENTIK_SECRET_KEY: "${AUTHENTIK_SECRET_KEY}"
    AUTHENTIK_LOG_LEVEL: "${AUTHENTIK_LOG_LEVEL}"
    AUTHENTIK_POSTGRESQL__HOST: "${AUTHENTIK_POSTGRESQL__HOST}"
    AUTHENTIK_POSTGRESQL__PORT: "${AUTHENTIK_POSTGRESQL__PORT}"
    AUTHENTIK_POSTGRESQL__USER: "${PG_USER}"
    AUTHENTIK_POSTGRESQL__PASSWORD: "${PG_PASS}"
    AUTHENTIK_POSTGRESQL__NAME: "${PG_DB}"
    AUTHENTIK_REDIS__HOST: "${AUTHENTIK_REDIS__HOST}"
    AUTHENTIK_REDIS__PORT: "${AUTHENTIK_REDIS__PORT}"
    AUTHENTIK_EMAIL__HOST: "${AUTHENTIK_EMAIL__HOST}"
    AUTHENTIK_EMAIL__PORT: "${AUTHENTIK_EMAIL__PORT}"
    AUTHENTIK_EMAIL__USERNAME: "${AUTHENTIK_EMAIL__USERNAME}"
    AUTHENTIK_EMAIL__PASSWORD: "${AUTHENTIK_EMAIL__PASSWORD}"
    AUTHENTIK_EMAIL__USE_TLS: "${AUTHENTIK_EMAIL__USE_TLS}"
    AUTHENTIK_EMAIL__USE_SSL: "${AUTHENTIK_EMAIL__USE_SSL}"
    AUTHENTIK_EMAIL__TIMEOUT: "${AUTHENTIK_EMAIL__TIMEOUT}"
    AUTHENTIK_EMAIL__FROM: "${AUTHENTIK_EMAIL__FROM}"
    AUTHENTIK_ERROR_REPORTING__ENABLED: "${AUTHENTIK_ERROR_REPORTING__ENABLED}"
  depends_on:
    - postgresql
    - redis

services:
  server:
    <<: *authentik
    container_name: authentik
    command: server
    ports:
      - "9000:9000"
    volumes:
      - /portainer/authentik/media/media
      - /portainer/authentik/templates:/templates

  worker:
    <<: *authentik
    container_name: authentik_worker
    command: worker

  postgresql:
    <<: *default
    container_name: authentik_postgresql
    image: postgres:16-alpine
    healthcheck:
      <<: *healthchecks
      test: ["CMD-SHELL", "pg_isready -d $${PG_DB} -U $${PG_USER}"]
    environment:
      PG_USER: "${PG_USER}"
      PG_PASS: "${PG_PASS}"
      PG_DB: "${PG_DB}"
    volumes:
      - database:/var/lib/postgresql/data

  redis:
    <<: *default
    container_name: authentik_redis
    image: redis:alpine
    command: --save 60 1 --loglevel warning
    healthcheck:
      <<: *healthchecks
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
    volumes:
      - redis:/data

networks:
  metrics:
    external: true
  authentik:
    driver: bridge

volumes:
  database:
    driver: local
  redis:
    driver: local
