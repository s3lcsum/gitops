// Prometheus scrape configurations
prometheus.scrape "adguard" {
  targets = [
    { __address__ = "adguard.lake.dominiksiejak.pl", job = "adguard", source = "alloy" },
  ]
  metrics_path = "/control/metrics"
  forward_to   = [prometheus.remote_write.cloud.receiver]
}

prometheus.scrape "traefik" {
  targets = [
    { __address__ = "traefik:9100", job = "traefik", source = "alloy", source_label = "source" },
  ]
  metrics_path     = "/metrics"
  scrape_interval  = "1m"
  forward_to       = [prometheus.remote_write.cloud.receiver]
}

prometheus.scrape "authentik" {
  targets = [
    { __address__ = "authentik:9300", job = "authentik", source = "alloy", source_label = "source" },
  ]
  metrics_path     = "/metrics"
  scrape_interval  = "1m"
  forward_to       = [prometheus.remote_write.cloud.receiver]
}

prometheus.scrape "postgres" {
  targets = [
    { __address__ = "postgres-exporter:9187", job = "postgres", source = "alloy", source_label = "source" },
  ]
  metrics_path     = "/metrics"
  scrape_interval  = "1m"
  forward_to       = [prometheus.remote_write.cloud.receiver]
}

prometheus.scrape "uptime_kuma" {
  targets = [
    { __address__ = "uptime_kuma:3001", job = "uptime_kuma", source = "alloy", source_label = "source" },
  ]
  forward_to = [prometheus.remote_write.cloud.receiver]
}

prometheus.scrape "grafana_synthetic_monitoring" {
  targets = [
    { __address__ = "grafana-synthetic-agent:4050", job = "grafana_synthetic_monitoring", source = "alloy", source_label = "source" },
  ]
  metrics_path     = "/metrics"
  scrape_interval  = "15s"
  forward_to       = [prometheus.remote_write.cloud.receiver]
}

// Prometheus remote write configuration
prometheus.remote_write "cloud" {
  endpoint {
    url = sys.env("PROM_REMOTE_WRITE_URL")
    basic_auth {
      username = sys.env("GCLOUD_HOSTED_METRICS_ID")
      password = sys.env("GCLOUD_RW_API_KEY")
    }
  }
}

// Loki source for Docker logs
discovery.docker "containers" {
  host = "unix:///var/run/docker.sock"
}

loki.source.docker "compose_logs" {
  host    = "unix:///var/run/docker.sock"
  targets = discovery.docker.containers.targets
  forward_to = [loki.process.compose.receiver]
}

// Loki processing pipeline
loki.process "compose" {
  forward_to = [loki.process.drop_old.receiver]
}

loki.process "drop_old" {
  forward_to = [loki.write.cloud.receiver]
  stage.drop {
    older_than          = "1h"
    drop_counter_reason = "too old"
  }
}

// Loki write configuration
loki.write "cloud" {
  endpoint {
    url = sys.env("LOKI_WRITE_URL")
    basic_auth {
      username = sys.env("GCLOUD_HOSTED_LOGS_ID")
      password = sys.env("GCLOUD_RW_API_KEY")
    }
  }
}
