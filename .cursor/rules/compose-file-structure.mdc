---
globs: **/compose.yaml
alwaysApply: false
---
# Docker Compose File Structure Guidelines

## Environment Variable Guidelines

### Sensitive vs. Configuration Values:
- **Use `env_file:`** for sensitive values (secrets, passwords, API keys, tokens)
- **Use `environment:`** for simple configuration values (log levels, feature flags, public settings)

### Environment File Documentation:
- **Always provide `.env.example` files:** Every `.env` file must have a corresponding `.env.example` file
- **Same keys, example values:** The `.env.example` should contain the same environment variable keys as the actual `.env` file, but with example/placeholder values instead of real sensitive data
- **Clear documentation:** Use descriptive example values that show the expected format

### Standardized Path Patterns:
- **env_file paths:** Always use `/opt/{stack_name}/{service}.env`
- **Volume mount paths:** Always use `/opt/{stack_name}/file.xxx`

**Example:**
```yaml
services:
  app:
    environment:
      - LOG_LEVEL=info
      - DEBUG_MODE=false
    env_file:
      - /opt/mystack/app.env  # Contains sensitive data like API_KEY, DB_PASSWORD
    volumes:
      - /opt/mystack/config.yml:/app/config.yml
```

**Environment file examples:**
```bash
# app.env (actual file - not committed to git)
API_KEY=sk-1234567890abcdef
DB_PASSWORD=MyS3cur3P@ssw0rd
JWT_SECRET=super-secret-jwt-key-here

# app.env.example (committed to git)
API_KEY=sk-your-api-key-here
DB_PASSWORD=your-secure-database-password
JWT_SECRET=your-jwt-secret-key
```

## Traefik Configuration Guidelines

### Minimal Traefik Labels:
- **Always include:** `traefik.enable: true`
- **Only add hostname label** if different from default pattern: `{service}.lake.dominiksiejak.pl`
- **Required network:** If using Traefik, always include the `proxy` network
- **Multiple networks:** If attached to more than one network, add `traefik.docker.network: proxy`
- **Use object format** for labels with key-value pairs

**Example with default hostname (no extra label needed):**
```yaml
services:
  myservice:
    labels:
      traefik.enable: true
    networks:
      - proxy
```

**Example with custom hostname:**
```yaml
services:
  myservice:
    labels:
      traefik.enable: true
      traefik.http.routers.myservice.rule: Host(`custom.lake.dominiksiejak.pl`)
    networks:
      - proxy
```

**Example with multiple networks (explicit Traefik network):**
```yaml
services:
  myservice:
    labels:
      traefik.enable: true
      traefik.docker.network: proxy
    networks:
      - proxy
      - internal
```

## PostgreSQL Database Access

**Use the centralized PostgreSQL stack** (`stacks/postgres/`) for all database needs. Never deploy separate PostgreSQL instances.

**To add PostgreSQL access for a new service:**

1. **Add to `stacks/postgres/postgres.env`:**
   ```bash
   MYSERVICE_DB_USER=myservice_user
   MYSERVICE_DB_PASSWORD=secure-password-here
   MYSERVICE_DB_NAME=myservice_db
   ```

2. **Add to `stacks/postgres/init.sh`:**
   ```bash
   setup_user_and_database "${MYSERVICE_DB_USER}" "${MYSERVICE_DB_PASSWORD}" "${MYSERVICE_DB_NAME}"
   ```

3. **Connect in your service's compose.yaml:**
   ```yaml
   services:
     myservice:
       environment:
         - DB_URL=postgresql://${MYSERVICE_DB_USER}:${MYSERVICE_DB_PASSWORD}@postgres:5432/${MYSERVICE_DB_NAME}
   ```
