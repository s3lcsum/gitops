# Traefik configuration based on your Docker Compose setup
traefik:
  # Image configuration
  image:
    registry: docker.io
    repository: traefik
    tag: "latest"

  # Deployment configuration
  deployment:
    replicas: 1

  # Service configuration
  service:
    type: LoadBalancer
    # Expose HTTP, HTTPS, and metrics ports
    spec:
      loadBalancerIP: ""  # Set your load balancer IP if needed

  # Ports configuration
  ports:
    web:
      port: 80
      expose: true
      exposedPort: 80
      protocol: TCP
      redirectTo: websecure
    websecure:
      port: 443
      expose: true
      exposedPort: 443
      protocol: TCP
      tls:
        enabled: true
        options: ""
        certResolver: "letsencrypt"
        domains:
          - main: "lake.dominiksiejak.pl"
            sans:
              - "*.lake.dominiksiejak.pl"
      http3:
        enabled: true
    traefik:
      port: 8080
      expose: false  # Dashboard access via ingress
      protocol: TCP
    metrics:
      port: 9100
      expose: true
      exposedPort: 9100
      protocol: TCP
    tailscale:
      port: 8443
      expose: true
      exposedPort: 8443
      protocol: TCP
      tls:
        enabled: true
        options: ""
        certResolver: "tailscale"

  # Global arguments
  globalArguments:
    - "--global.checknewversion=false"
    - "--global.sendanonymoususage=false"

  # Additional arguments
  additionalArguments:
    - "--log.level=INFO"
    - "--accesslog=true"
    - "--api.dashboard=true"
    - "--api.insecure=false"
    - "--ping=true"
    - "--providers.kubernetescrd=true"
    - "--providers.kubernetesingress=true"
    - "--providers.kubernetesingress.ingressclass=traefik"
    - "--providers.file.filename=/etc/traefik/dynamic.yaml"
    - "--certificatesresolvers.letsencrypt.acme.email=dreewniak@gmail.com"
    - "--certificatesresolvers.letsencrypt.acme.storage=/data/acme.json"
    - "--certificatesresolvers.letsencrypt.acme.dnschallenge.provider=cloudflare"
    - "--certificatesresolvers.letsencrypt.acme.dnschallenge.resolvers=1.1.1.1:53,8.8.8.8:53"
    - "--certificatesresolvers.letsencrypt.acme.dnschallenge.delaybeforecheck=0"
    - "--certificatesresolvers.letsencrypt.acme.dnschallenge.disablepropagationcheck=false"
    - "--certificatesresolvers.tailscale.acme.email=dreewniak@gmail.com"
    - "--certificatesresolvers.tailscale.acme.storage=/data/tailscale-acme.json"
    - "--certificatesresolvers.tailscale.acme.tlschallenge=true"
    - "--metrics.prometheus=true"
    - "--metrics.prometheus.entrypoint=metrics"
    - "--metrics.prometheus.addentrypointslabels=true"
    - "--metrics.prometheus.addrouterslabels=true"
    - "--metrics.prometheus.addserviceslabels=true"
    - "--metrics.prometheus.buckets=0.1,0.3,1.2,5.0"

  # Environment variables for Cloudflare
  env:
    - name: CF_DNS_API_TOKEN
      valueFrom:
        secretKeyRef:
          name: traefik-cloudflare
          key: api-token
    - name: CLOUDFLARE_ZONE_ID
      valueFrom:
        secretKeyRef:
          name: traefik-cloudflare
          key: zone-id

  # Volumes for dynamic configuration
  volumes:
    - name: dynamic-config
      mountPath: /etc/traefik
      type: configMap

  # Persistence for ACME certificates
  persistence:
    enabled: true
    name: data
    accessMode: ReadWriteOnce
    size: 128Mi
    path: /data

  # Security context
  securityContext:
    capabilities:
      drop: [ALL]
    readOnlyRootFilesystem: true
    runAsGroup: 65532
    runAsNonRoot: true
    runAsUser: 65532

  # Pod security context
  podSecurityContext:
    fsGroup: 65532

  # Resources
  resources:
    requests:
      cpu: 100m
      memory: 50Mi
    limits:
      cpu: 300m
      memory: 150Mi

# Dashboard ingress
dashboard:
  enabled: true
  domain: "traefik.lake.dominiksiejak.pl"

# Static routes for your infrastructure
staticRoutes:
  enabled: true
  routes:
    - name: synology
      host: "synology.lake.dominiksiejak.pl"
      service: "https://192.168.89.210:5001/"
      insecure: true
    - name: proxmox
      host: "proxmox.lake.dominiksiejak.pl"
      service: "https://192.168.89.254:8006/"
      insecure: true
    - name: mikrotik
      host: "router.lake.dominiksiejak.pl"
      service: "http://192.168.89.1/"
      insecure: false
# Tailscale configuration
tailscale:
  enabled: true
  # Tailscale domain suffix (your tailnet name)
  domain: "tail-scale.ts.net"  # Replace with your actual Tailscale domain
  # Services to expose via Tailscale
  services:
    - name: "traefik-dashboard"
      host: "traefik"
      service: "traefik"
      port: 8080
    - name: "n8n-tailscale"
      host: "n8n"
      service: "n8n"
      port: 5678
      namespace: "n8n"
